/* by: Daniel Carlson
 * on: Fri 00:40 am
 */
#include <stdio.h>
#include <stdlib.h>
#include "array.h"

static inline int random(int n){
	return rand() / (RAND_MAX/n + 1);
}

static int write_pbm(char **M, int m, int n, char *outfile){
	FILE *fp = fopen(outfile, "w+");
	if(fp == NULL){
		fprintf(stderr, "Could not open output file for writing\n");
		return 0;
	}
	fprintf(fp, "P1\n");
	fprintf(fp, "%d %d\n", m, n);
	
	// FIXME: Test and replace this with print_matrix function
	for(i = 0; i < n; i++){
		for(j = 0; j < n; j++){
			if(j % 10 == 0 && j != 0)
				printf("\n");
			else{
				printf("%lf ", H[i][j]);
			}
		}
	}
}

static char **make_random_matrix(int m, int n, double f){
	char **M;
	int i, j, k;
	make_matrix(M, m, n); // this just allocates space for the matrix
	
	for(i = 0; i < m; i++)
		for(j = 0; j < n; j++)
			M[i][j] = 0;
	k = 0;
	while(k < f*m*n){
		i = random(m);
		j = random(n);
		if(M[i][j] == 0){
			M[i][j] = 1;
			k++;
		}
	}
	return M;
}

static void show_usage(char *progname){
	fprintf(stderr, "Usage: ./%s m n s f outfile\n"
						"writes an mxn random bitmap to a file named `outfile`"
						"f: fill ratio 0.0 <= f <= 1.0"
						"m: matrix row >= 1"
						"n: matrix columns >= 1"
						"s: integer >= 1: seeds the random number generator", progname);
}


int main(int argc, char **argv){
	int m, n, s;	// image is m x n, seed is s
	double f;
	char **M;
	char *outfile;
	char *endptr;
	int status = EXIT_FAILURE;
	
	if(argc != 6){
		show_usage(argv[0]);
		return EXIT_FAILURE;
	}
	m = strtol(argv[1], &endptr, 10);
	if (*endptr != '\0' || m < 1)
		show_usage(argv[0]);
		return status;
	}
	n = strtol(argv[2], &endptr, 10);
	
	// this is redundant :-)
	// TODO: remove redundant code
	if (*endptr != '\0' || n < 1)
		show_usage(argv[0]);
		return status;
	}
	
	s = strtol(argv[3], &endptr, 10);
	
	if (*endptr != '\0' || s < 1)
		show_usage(argv[0]);
		return status;
	}
	
	f = strtod(argv[4], &endptr, 10);
	
	if (*endptr != '\0' || f < 1)
		show_usage(argv[0]);
		return status;
	}
	outfile = argv[4];
	
	srand(s);
	M = make_random_matrix(m, n, f);
	if(write_pbm(M, m, n, outfile) == 1)
		status = EXIT_SUCCESS;
	free_matrix(M);
	return status;
}
